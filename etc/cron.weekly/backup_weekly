#!/bin/bash

# ------------------------------------------------- #
# ----- Optimized Weekly Backup Script V1.0.0 ------#
# ------------------------------------------------- #

set -euo pipefail

BACKUP_CONFIG_FILE=/etc/chbackup/backup.conf
MYSQL_CONFIG_FILE=/etc/chbackup/mysql.conf
source "$BACKUP_CONFIG_FILE"

# Ensure we're running as root
if [[ $(id -u) -ne 0 ]]; then
  echo "Must be run as root" >&2
  exit 1
fi

# ------------------------------------------------- #
# ---------- Helper Functions --------------------- #
# ------------------------------------------------- #

ensure_remote_dir() {
  local dir="$1"
  ssh "$USER@$SERVER" "mkdir -p '$dir'"
}

rotate_snapshots() {
  local plugin="$1"
  local db="$2"
  local base="$SERVER_DIR/$plugin/db/$db.sql"
  local suffix="weekly"
  for ((i=TOT_BKP; i>0; i--)); do
    local j=$((i - 1))
    if ssh "$USER@$SERVER" stat "$base.$suffix.$j.gz" >/dev/null 2>&1; then
      ssh "$USER@$SERVER" mv "$base.$suffix.$j.gz" "$base.$suffix.$i.gz"
    fi
  done
  if ssh "$USER@$SERVER" stat "$base.$suffix.$TOT_BKP.gz" >/dev/null 2>&1; then
    ssh "$USER@$SERVER" rm "$base.$suffix.$TOT_BKP.gz"
  fi
}

copy_if_exists() {
  local src="$1"
  local dst="$2"
  if ssh "$USER@$SERVER" stat "$src" >/dev/null 2>&1; then
    ssh "$USER@$SERVER" cp "$src" "$dst"
  fi
}

# ------------------------------------------------- #
# ---------- Begin Files Backup ------------------- #
# ------------------------------------------------- #

if [[ -n "$LOCAL_DIR" ]]; then
  ensure_remote_dir "$SERVER_DIR/backup"

  # Rotate snapshots
  for ((i=TOT_BKP; i>0; i--)); do
    j=$((i-1))
    if ssh "$USER@$SERVER" stat "$SERVER_DIR/backup/weekly.$j" >/dev/null 2>&1; then
      ssh "$USER@$SERVER" mv "$SERVER_DIR/backup/weekly.$j" "$SERVER_DIR/backup/weekly.$i"
    fi
  done

  # delete the oldest snapshot, if it exists:
  if ssh "$USER@$SERVER" stat "$SERVER_DIR/backup/weekly.$TOT_BKP" >/dev/null 2>&1; then
    ssh "$USER@$SERVER" rm -rf "$SERVER_DIR/backup/weekly.$TOT_BKP"
  fi

  # Copy daily.0 to weekly.0
  if ssh "$USER@$SERVER" stat "$SERVER_DIR/backup/daily.0" >/dev/null 2>&1; then
    ssh "$USER@$SERVER" cp -al "$SERVER_DIR/backup/daily.0" "$SERVER_DIR/backup/weekly.0"
  fi

fi

# ------------------------------------------------- #
# ---------- Begin MySQL Backup ------------------- #
# ------------------------------------------------- #

if [[ $DO_MYSQL_BACKUP =~ ^[1YySs]$ ]]; then
  ensure_remote_dir "$SERVER_DIR/mysql/db"

  # Global MySQL
  rotate_snapshots "mysql" "all_mysql"
  copy_if_exists "$SERVER_DIR/mysql/all_mysql.sql.daily.0.gz" "$SERVER_DIR/mysql/all_mysql.sql.weekly.0.gz"

  databases=$(mysql --defaults-extra-file="$MYSQL_CONFIG_FILE" -e "SHOW DATABASES;" | grep -Ev "^(Database|information_schema|performance_schema|mysql|sys)")
  for db in $databases; do
    rotate_snapshots "mysql" "$db"
    copy_if_exists "$SERVER_DIR/mysql/db/$db.sql.daily.0.gz" "$SERVER_DIR/mysql/db/$db.sql.weekly.0.gz"
  done
fi

# ------------------------------------------------- #
# ---------- Begin PostgreSQL Backup -------------- #
# ------------------------------------------------- #

if [[ $DO_PGSQL_BACKUP =~ ^[1YySs]$ ]]; then
  ensure_remote_dir "$SERVER_DIR/pgsql/db"

  rotate_snapshots "pgsql" "all_pgsql"
  copy_if_exists "$SERVER_DIR/pgsql/all_pgsql.sql.daily.0.gz" "$SERVER_DIR/pgsql/all_pgsql.sql.weekly.0.gz"

  databases=$(psql -U postgres -Atc "SELECT datname FROM pg_database WHERE datname NOT IN ('template0','template1','postgres')")
  for db in $databases; do
    rotate_snapshots "pgsql" "$db"
    copy_if_exists "$SERVER_DIR/pgsql/db/$db.sql.daily.0.gz" "$SERVER_DIR/pgsql/db/$db.sql.weekly.0.gz"
  done
fi

# ------------------------------------------------- #
# ---------- Begin Dokku Backup ------------------- #
# ------------------------------------------------- #

if [[ $DO_DOKKU_BACKUP =~ ^[1YySs]$ ]]; then
  DOKKU_PLUGINS=$(dokku plugin:list | awk '{print $1}' | paste -sd ' ' -)

  for plugin in postgres mysql mongo; do
    if [[ " $DOKKU_PLUGINS " =~ " $plugin " ]]; then
      ensure_remote_dir "$SERVER_DIR/$plugin/db"
      mapfile -t DBS < <(dokku $plugin:list | tail -n +2 | awk '{print $1}')
      for db in "${DBS[@]}"; do
        rotate_snapshots "$plugin" "$db"
        copy_if_exists "$SERVER_DIR/$plugin/db/$db.sql.daily.0.gz" "$SERVER_DIR/$plugin/db/$db.sql.weekly.0.gz"
      done
    fi
  done

  # Config environment
  mapfile -t DOKKU_APPS < <(dokku apps:list | tail -n +2)
  ensure_remote_dir "$SERVER_DIR/env"
  for app in "${DOKKU_APPS[@]}"; do
    rotate_snapshots "env" "$app.config"
    copy_if_exists "$SERVER_DIR/env/$app.config.env.daily.0.gz" "$SERVER_DIR/env/$app.config.env.weekly.0.gz"
  done

fi

