#!/bin/bash
# ------------------------------------------------- #
# ---------- Optimized Backup Script 1.0.0 -------- #
# ------------------------------------------------- #

set -euo pipefail

# ------------------------------------------------- #
# ---------- Load Configuration and Sanity Check -- #
# ------------------------------------------------- #

BACKUP_CONFIG_FILE=/etc/chbackup/backup.conf
MYSQL_CONFIG_FILE=/etc/chbackup/mysql.conf
source "$BACKUP_CONFIG_FILE"

# Ensure we're root
if [[ $(id -u) -ne 0 ]]; then
  echo "Must be run as root" >&2
  exit 1
fi

# ------------------------------------------------- #
# ---------- Helper Functions --------------------- #
# ------------------------------------------------- #

# Ensure remote directory exists
ensure_remote_dir() {
  local dir="$1"
  ssh "$USER@$SERVER" "mkdir -p '$dir'"
}

# Rotate backups with .daily.N.gz suffix
# Rotate backups for plugin and db name (abstracted version)
rotate_snapshots() {
  local plugin="$1"
  local db="$2"
  local base="$SERVER_DIR/$plugin/db/$db.sql"
  local suffix="daily"
  for ((i=TOT_BKP; i>0; i--)); do
    local j=$((i - 1))
    if ssh "$USER@$SERVER" stat "$base.$suffix.$j.gz" >/dev/null 2>&1; then
      ssh "$USER@$SERVER" mv "$base.$suffix.$j.gz" "$base.$suffix.$i.gz"
    fi
  done
  if ssh "$USER@$SERVER" stat "$base.$suffix.$TOT_BKP.gz" >/dev/null 2>&1; then
    ssh "$USER@$SERVER" rm "$base.$suffix.$TOT_BKP.gz"
  fi
}

# Transfer and remove temporary backup file
backup_file_to_remote() {
  local file="$1"
  local remote_dir="$2"
  scp "$file" "$USER@$SERVER:$remote_dir" && rm "$file"
}

# ------------------------------------------------- #
# ---------- Begin Files Backup ------------------- #
# ------------------------------------------------- #

if [[ -n "$LOCAL_DIR" ]]; then
  ensure_remote_dir "$SERVER_DIR/backup"

  # Shift existing daily snapshots
  for ((i=TOT_BKP; i>1; i--)); do
    j=$((i-1))
    if ssh "$USER@$SERVER" stat "$SERVER_DIR/backup/daily.$j" >/dev/null 2>&1; then
      ssh "$USER@$SERVER" mv "$SERVER_DIR/backup/daily.$j" "$SERVER_DIR/backup/daily.$i"
    fi
  done

  # Delete oldest if exists
  if ssh "$USER@$SERVER" stat "$SERVER_DIR/backup/daily.$TOT_BKP" >/dev/null 2>&1; then
    ssh "$USER@$SERVER" rm -rf "$SERVER_DIR/backup/daily.$TOT_BKP"
  fi

  # Create hard link copy of latest
  if ssh "$USER@$SERVER" stat "$SERVER_DIR/backup/daily.0" >/dev/null 2>&1; then
    ssh "$USER@$SERVER" cp -al "$SERVER_DIR/backup/daily.0" "$SERVER_DIR/backup/daily.1"
  fi

  # Rsync each directory listed
  IFS=':' read -ra DIRS <<< "$LOCAL_DIR"
  for dir in "${DIRS[@]}"; do
    ssh "$USER@$SERVER" "mkdir -p '$SERVER_DIR/backup/daily.0$(dirname "$dir")'"
    rsync -avzq ${DELETE_MISSING:+--delete} --exclude-from='/etc/chbackup/exclude-list.conf' --log-file="$LOGFILE" "$dir/" "$USER@$SERVER:$SERVER_DIR/backup/daily.0$dir/"
  done

  # Update the modification time to mark snapshot as latest
  ssh "$USER@$SERVER" touch "$SERVER_DIR/backup/daily.0"

fi

# ------------------------------------------------- #
# ---------- Begin MySQL Backup ------------------- #
# ------------------------------------------------- #

if [[ $DO_MYSQL_BACKUP =~ ^[1YySs]$ ]]; then
  ensure_remote_dir "$SERVER_DIR/mysql/db"

  # Global MySQL dump
  rotate_snapshots "mysql" "all_mysql"
  mysqldump --defaults-extra-file="$MYSQL_CONFIG_FILE" -A --routines --create-options --events --ignore-table=mysql.event --opt | gzip > /tmp/all_mysql.sql.daily.0.gz
  backup_file_to_remote "/tmp/all_mysql.sql.daily.0.gz" "$SERVER_DIR/mysql"

  # Per-database dumps
  databases=$(mysql --defaults-extra-file="$MYSQL_CONFIG_FILE" -e "SHOW DATABASES;" | grep -Ev "^(Database|information_schema|performance_schema|mysql|sys)")
  for db in $databases; do
    rotate_snapshots "mysql" "$db"
    mysqldump --defaults-extra-file="$MYSQL_CONFIG_FILE" --routines --events --ignore-table=mysql.event --force --opt --single-transaction --databases "$db" | gzip > "/tmp/$db.sql.daily.0.gz"
    backup_file_to_remote "/tmp/$db.sql.daily.0.gz" "$SERVER_DIR/mysql/db"
  done

fi

# ------------------------------------------------- #
# ---------- Begin PostgreSQL Backup -------------- #
# ------------------------------------------------- #

if [[ $DO_PGSQL_BACKUP =~ ^[1YySs]$ ]]; then
  ensure_remote_dir "$SERVER_DIR/pgsql/db"

  # Global pg_basebackup
  rotate_snapshots "pgsql" "all_pgsql"
  pg_basebackup -Ft -Xs -D /tmp/all_pgsql.sql.daily.0 -U postgres -p 5432
  tar zcvf /tmp/all_pgsql.sql.daily.0.tar.gz /tmp/all_pgsql.sql.daily.0
  rm -rf /tmp/all_pgsql.sql.daily.0
  backup_file_to_remote "/tmp/all_pgsql.sql.daily.0.tar.gz" "$SERVER_DIR/pgsql"

  # Per-database dumps
  databases=$(psql -U postgres -Atc "SELECT datname FROM pg_database WHERE datname NOT IN ('template0', 'template1', 'postgres')")
  for db in $databases; do
    rotate_snapshots "pgsql" "$db"
    pg_dump -U postgres -p 5432 "$db" | gzip > "/tmp/$db.sql.daily.0.gz"
    backup_file_to_remote "/tmp/$db.sql.daily.0.gz" "$SERVER_DIR/pgsql/db"
  done
fi

# ------------------------------------------------- #
# ---------- Begin Dokku Database Backup ---------- #
# ------------------------------------------------- #

if [[ $DO_DOKKU_BACKUP =~ ^[1YySs]$ ]]; then
  TMP_DIR="/tmp/dokku_db_backups"
  mkdir -p "$TMP_DIR"

  DOKKU_PLUGINS=$(dokku plugin:list | awk '{print $1}' | paste -sd ' ' -)

  # Per-plugin Dokku DB backups
  for plugin in postgres mysql mongo; do
    if [[ " $DOKKU_PLUGINS " =~ " $plugin " ]]; then
      ensure_remote_dir "$SERVER_DIR/$plugin/db"
      mapfile -t DBS < <(dokku $plugin:list | tail -n +2 | awk '{print $1}')
      for db in "${DBS[@]}"; do
        echo "Backing up Dokku $plugin DB: $db"
        rotate_snapshots "$plugin" "$db"
        script -q -c "dokku $plugin:export $db" /dev/null > "$TMP_DIR/$db.sql.daily.0"
        gzip "$TMP_DIR/$db.sql.daily.0"
        backup_file_to_remote "$TMP_DIR/$db.sql.daily.0.gz" "$SERVER_DIR/$plugin/db"
      done
    fi
  done

  # Dokku environment config backup
  ensure_remote_dir "$SERVER_DIR/env"
  rotate_snapshots "env" "config"
  dokku config:export miapp > "$TMP_DIR/config.env"
  gzip "$TMP_DIR/config.env"
  backup_file_to_remote "$TMP_DIR/config.env.gz" "$SERVER_DIR/env"
  rm -rf "$TMP_DIR"

fi
